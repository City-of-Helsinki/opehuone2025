// WordPress webpack config.
const defaultConfig = require('@wordpress/scripts/config/webpack.config');
const webpack = require('webpack');
const path = require('path');

const RemoveEmptyScriptsPlugin = require('webpack-remove-empty-scripts');
const LiveReloadPlugin = require('webpack-livereload-plugin');
const CopyPlugin = require('copy-webpack-plugin');

const isProduction = process.env.NODE_ENV === 'production';

/**
 * Post build script plugin.
 */
class PostBuildScriptPlugin {
	constructor(scriptName) {
		this.scriptName = scriptName;
	}

	apply(compiler) {
		compiler.hooks.done.tapAsync(
			'PostBuildScriptPlugin',
			async (stats, callback) => {
				if (!stats.hasErrors()) {
					try {
						require('child_process').execSync(
							`npm run ${this.scriptName}`
						);
					} catch (error) {
						console.error(
							'Error running post-build script:',
							error
						);
					}
				}
				callback();
			}
		);
	}
}

// Add the LiveReload plugin to the default config if not production.
if (!isProduction) {
	defaultConfig.plugins.push(
		new LiveReloadPlugin({
			useSourceHash: true,
			liveCSS: true,
		})
	);
}

// Add any a new entry point by extending the webpack config.
module.exports = {
	...defaultConfig,
	...{
		entry: {
			'js/screen': path.resolve(
				process.cwd(),
				'resources/js',
				'screen.js'
			),
			'js/editor': path.resolve(
				process.cwd(),
				'resources/js',
				'editor.js'
			),
			'css/screen': path.resolve(
				process.cwd(),
				'resources/scss',
				'screen.scss'
			),
			'css/editor': path.resolve(
				process.cwd(),
				'resources/scss',
				'editor.scss'
			),
			'css/login': path.resolve(
				process.cwd(),
				'resources/scss',
				'login.scss'
			),
		},
		plugins: [
			// Include WP plugin config.
			...defaultConfig.plugins,

			new webpack.DefinePlugin({
				'process.env.NODE_ENV': JSON.stringify(
					process.env.NODE_ENV || 'development'
				),
			}),

			new CopyPlugin({
				patterns: [
					//{ fonts already in main theme..
					//	from: 'resources/fonts/*',
          //	to: 'fonts/[name][ext]',
					//	force: true,
					//},
					{
						from: 'resources/images/**/*',
						to: ({ context, absoluteFilename }) => {
							// Remove 'resources/images/' from the output path
							const relativePath = path.relative(
								path.resolve(context, 'resources/images'),
								absoluteFilename
							);
							return `images/${relativePath}`;
						},
						force: true,
					},
				],
			}),

			// Removes the empty `.js` files generated by webpack but
			// sets it after WP has generated its `*.asset.php` file.
			new RemoveEmptyScriptsPlugin({
				stage: RemoveEmptyScriptsPlugin.STAGE_AFTER_PROCESS_PLUGINS,
			}),
		],
	},
};
